[{"title":"Java基础常见面试题总结","path":"/posts/38943.html","content":"【重要】深拷贝和浅拷贝 深拷贝：对象的所有属性和嵌套对象均被完整复制，两个对象互不影响。 浅拷贝：对象本身被复制，但嵌套对象仍指向同一引用。 实现方式： 深拷贝：clone() 方法（结合序列化）或手动实现。 浅拷贝：clone() 方法（默认实现）。 【重要】异常 分类： 检查异常（Checked Exception）：编译时处理（如 IOException）。 运行时异常（RuntimeException）：运行时抛出（如 NullPointerException）。 关键字：try、catch、finally、throw、throws。 自定义异常：继承 Exception 或 RuntimeException。 【重要】反射 用途：动态加载类、获取方法&#x2F;字段、运行时实例化对象。 关键类：Class、Method、Field、Constructor。 应用场景： 框架设计（如 Spring）。 动态代理。 【重要】注解 定义：元数据，用于标记代码行为。 分类： 内置注解：@Override、@Deprecated、@FunctionalInterface。 自定义注解：需结合 @Retention 和 @Target 指定作用范围和生命周期。 运行时解析：结合反射获取注解信息。 【重要】IO（BIO、NIO、AIO） BIO：传统的阻塞式 IO，处理一个连接对应一个线程。 NIO：非阻塞 IO，基于 Channel 和 Buffer 实现多路复用。 AIO：异步 IO，利用操作系统的异步能力，适合高并发场景。 【重要】线程 线程生命周期：NEW、RUNNABLE、BLOCKED、WAITING、TIMED_WAITING、TERMINATED。 线程安全：synchronized、Lock。 线程池：ExecutorService 提供线程管理能力，减少资源消耗。 并发工具类：CountDownLatch、CyclicBarrier、Semaphore、CompletableFuture。 多线程问题：死锁、活锁、线程饥饿。 线程通信：wait、notify 和 notifyAll。 【重要】泛型和通配符 泛型定义：在类、接口和方法中引入类型参数。 通配符： ? extends T：上界通配符，表示泛型是 T 或其子类。 ? super T：下界通配符，表示泛型是 T 或其父类。 类型擦除：编译时将泛型类型替换为 Object 或边界类型。 【重要】集合框架 核心接口：List、Set、Map。 实现类： ArrayList：动态数组，查询快，增删慢。 LinkedList：链表结构，增删快，查询慢。 HashSet：基于 HashMap 实现，不保证顺序。 TreeSet：基于红黑树，保证顺序。 HashMap：基于数组和链表（或红黑树）的键值对存储结构。 ConcurrentHashMap：线程安全，分段锁实现（JDK 1.8 后改为 CAS 和红黑树）。 常见问题： HashMap 的工作原理。 HashMap 在 JDK 1.8 中的优化（链表转为红黑树）。 ConcurrentHashMap 的线程安全机制。 ArrayList 和 LinkedList 的区别。 equals 和 &#x3D;&#x3D; **==**：比较引用地址是否相同。 **equals**：默认等同于 ==，可重写以比较内容相等性（如 String）。 hashCode() 用于散列数据结构（如 HashMap）。 重写规则：equals 返回相等时，hashCode 必须相等。 String、StringBuffer、StringBuilder String：不可变，适合少量字符串拼接。 StringBuffer：线程安全，适合多线程环境下的字符串操作。 StringBuilder：线程不安全，适合单线程环境下的字符串操作。 字符串拼接：+ 和 StringBuilder 使用 + 时，JVM 会自动使用 StringBuilder 优化（循环中建议手动使用 StringBuilder）。 构造方法 构造器用于初始化对象，可重载。 默认构造器在未显式定义构造器时由编译器生成。 值传递和引用传递 Java 中所有参数都是 值传递。 对象引用传递时，修改引用指向的对象内容会影响原对象。 序列化和反序列化 序列化：将对象转换为字节流（实现 Serializable 接口）。 反序列化：将字节流恢复为对象。 常用工具：ObjectInputStream 和 ObjectOutputStream。 接口和抽象类 接口：定义行为契约，支持多继承。 抽象类：部分实现和行为模板，只能单继承。 静态方法与非静态成员 静态方法属于类，不能直接访问非静态成员，需实例化后调用。 面向对象特征 继承：代码复用与扩展。 封装：隐藏实现细节，保护数据。 多态：同一接口，不同实现。 基本数据类型和包装数据类型 基本数据类型：int、float、boolean 等。 包装类型：Integer、Float、Boolean 等，有自动装箱和拆箱。 缓存机制：Integer 值在 -128~127 范围内会被缓存。 可变长参数的方法 通过 ... 定义参数长度可变的方法，允许传递零到多个参数。 Java 语言特性Java 8 的新特性（如 Lambda 表达式、Stream、Optional）。接口的默认方法和静态方法的区别。什么是单例模式？如何避免反射和序列化破坏单例？ 作为一名 HR 和开发团队的负责人，在 Java 面试中，我会从基础知识、核心技术、实际应用能力、问题解决能力等方面设计问题，以全面考察候选人的技术水平和实际开发能力。以下是我认为重要的一些问题及其分类： 基础知识 Java 的内存模型： JVM 的内存结构（堆、栈、方法区、程序计数器、本地方法栈）。 类加载机制及双亲委派模型。 如何排查内存泄漏？ 垃圾回收（GC）： 垃圾回收机制的原理（引用计数、标记清除、复制算法等）。 垃圾回收器（Serial、Parallel、CMS、G1）的特点和适用场景。 如何调优 GC 参数？ 多线程与并发： synchronized 和 ReentrantLock 的区别。 并发容器（ConcurrentHashMap 和 CopyOnWriteArrayList）的实现原理。 volatile 关键字的使用场景与原理。 什么是线程池？线程池的几种常见类型及其特点？ 集合框架： List、Set、Map 的实现区别及选择场景。 HashMap 的工作原理（包括 JDK 1.8 之后的变化）。 TreeMap 和 HashMap 的区别。 Java 语言特性： Java 8 的新特性（如 Lambda 表达式、Stream、Optional）。 接口的默认方法和静态方法的区别。 什么是单例模式？如何避免反射和序列化破坏单例？ 实际开发与设计能力 系统设计： 设计一个线程安全的计数器（可以讨论原子变量、锁机制）。 设计一个高并发环境下的限流器（可以讨论令牌桶、漏桶算法）。 如何设计一个可扩展的电商系统中订单服务模块？ 微服务与分布式系统： 如何在分布式环境中保证数据一致性？ 了解哪些分布式技术（如 RPC、注册中心、配置中心等）？ 说说你对 CAP 原则的理解。 性能优化： 如何优化大数据量的分页查询？ 遇到系统性能瓶颈时的排查和优化方法？ 线上服务 CPU 飙升时，你会如何处理？ 数据库与 ORM 框架： MySQL 的索引结构，如何选择索引类型？ 解释 Hibernate 的一级缓存和二级缓存。 如何优化复杂的 SQL 查询？ 实战能力 编码能力： 如何用 Java 实现生产者-消费者模式？ 手写一个简单的 LRU 缓存（可以使用 LinkedHashMap 或双向链表加 HashMap）。 实现多线程打印奇偶数。 调试能力： 如何排查 NullPointerException？ 遇到多线程死锁如何排查和解决？ 框架和工具： Spring 中的依赖注入和控制反转的原理。 MyBatis 的动态 SQL 是如何实现的？ 了解哪些性能分析工具（如 JProfiler、VisualVM）？ 场景化问题 代码优化与重构： 如果接手一段低效且难以维护的代码，你会如何重构？ 如何在团队中推动代码审查和编码规范？ 设计模式： 解释你在项目中用过的设计模式。 如何实现一个简单的观察者模式？ 单例模式有几种实现方式？它们的优缺点是什么？ 实际项目经验： 描述一个你参与的 Java 项目中的技术难点，你是如何解决的？ 如何在项目中确保代码的高质量和高性能？ 软技能补充 学习能力： 你最近学习了哪些技术？如何应用到实际项目中？ 如果给你一个新的技术栈（如 Spring Boot + Kafka），你会如何快速上手？ 团队协作： 遇到团队成员之间对技术选型有分歧时，你会怎么处理？ 如果在代码审查中发现其他成员的代码有问题，你会如何提出建议？"},{"title":"Hexo搭建静态博客流程","path":"/posts/51860.html","content":"其他配置使用CloudFlare配置博客搭建（一）| 利用cloudflare加速github博客访问https://qinyu.space/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E5%88%A9%E7%94%A8cloudflare%E5%8A%A0%E9%80%9Fgithub%E4%B8%BB%E9%A1%B5%E8%AE%BF%E9%97%AE/ 如何给你的网站套上Cloudflare（以阿里云为例）https://blog.csdn.net/zhyl8157121/article/details/100551592 需要在阿里云上修改DNS服务器 如果提示：重定向次数过多需要在cloudflare中修改 SSL&#x2F;TLS，点击配置、自定义、选择完全并保存。 个性化配置左侧边栏背景色设置 打开主题的css文件进行修改： node_modules/hexo-theme-stellar/source/css/_defines/theme.styl1234567_light_root()...--alpha60: hsl($color-background-h, $color-background-s, $color-background-l)_dark_root()...--alpha60: hsl($color-background-h, $color-background-s * 0.5, (100 - $color-background-l) * 2 + 8) 需要修改两个节点下的 –alpha60 属性，要和 –site-bg 的值一致 左侧边栏主导航栏配置修改方式https://github.com/weekdaycare/hexo-theme-stellar/blob/main/source/css/_components/sidebar/menu.styl 新建 menu.styl 文件，路径： node_modules/hexo-theme-stellar/source/css/_components/sidebar/menu.styl 文件内容如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556.nav-area .menudisplay: gridmargin-bottom: 8pxbox-shadow: $boxshadow-inset-blockpadding: 1pxborder: 1px solid var(--block-border)border-radius: $border-barbackground: var(--block)grid-template-columns: repeat(hexo-config(&#x27;menubar.columns&#x27;), 1fr)grid-gap: 2px&amp;::-webkit-scrollbardisplay: none&amp;::-webkit-scrollbar-track-piecebackground: transparent&amp;::-webkit-scrollbar-thumbdisplay: none.nav-itembox-sizing: border-boxwidth: 100%min-height: 38pxfont-size: $fs-15font-weight: 500color: var(--text-p3)text-align: centerposition: relativedisplay: flexflex-direction: columnalign-items: centerjustify-content: centerimg,svgheight: 28pxobject-fit: containfilter: grayscale(100%) brightness(0.8) opacity(0.8)trans1 allspantext-overflow: ellipsisword-break: keep-all&amp;.active, &amp;:hovercolor: var(--text-p1)background: var(--card)trans1 backgroundborder-radius: $border-barbox-shadow: $boxshadow-buttonimg,svgfilter: unset&amp;.active:aftercontent: &#x27;&#x27;position absolutewidth: 16pxheight: 2pxleft: 50%transform: translateX(-50%)border-radius: 2pxbottom: 2pxbackground: currentColor 左侧边栏主导航栏按钮配置 修改或新建 _config.stellar.yml 中 menubar 节点下的内容：_config.stellar.yml123456789101112131415161718menubar: columns: 3 # 一行多少个 items: # 可按照自己需求增加，符合以下格式即可 - id: post theme: &#x27;#1BCDFC&#x27; icon: # solar:documents-bold-duotone title: 博客 url: / - id: shuoshuo theme: &#x27;#3DC550&#x27; icon: # solar:notebook-bookmark-bold-duotone title: 时间线 url: /shuoshuo/ - id: about theme: &#x27;#FA6400&#x27; icon: # solar:planet-bold-duotone title: 关于 url: /about/ 在 source 文件夹下创建与配置文件中 menubar.items.id&#x2F;url 同名的文件夹，并创建 index.md 文件，内容如下：source/about/index.md12345---menu_id: abouttitle: 关于comments: false--- 给超长代码添加滚动条给超长代码添加滚动条https://felicxfoster.github.io/4199909915.html#%E7%BB%99%E8%B6%85%E9%95%BF%E4%BB%A3%E7%A0%81%E5%9D%97%E5%A2%9E%E5%8A%A0%E6%BB%9A%E5%8A%A8%E6%9D%A1 新建 custom.js 文件路径：在node_modules/hexo-theme-stellar/source/js 1234567891011121314151617181920// 给超长代码块增加滚动条function adjustCodeBlockHeight() &#123; document.addEventListener(&quot;DOMContentLoaded&quot;, function () &#123; // 选择所有的.md-text元素 var codeBlocks = document.querySelectorAll(&#x27;.md-text&#x27;); // 遍历每个.md-text元素 codeBlocks.forEach(function (block) &#123; // 检查是否包含.highlight类的子元素，且父元素高度超过500px var highlightBlocks = block.querySelectorAll(&#x27;.highlight&#x27;); highlightBlocks.forEach(function (highlightBlock) &#123; if (highlightBlock.clientHeight &gt; 800) &#123; highlightBlock.style.maxHeight = &#x27;300px&#x27;; highlightBlock.style.overflow = &#x27;auto&#x27;; &#125; &#125;); &#125;); &#125;);&#125;adjustCodeBlockHeight() 在 _config.yml 文件的最后一行添加以下信息 12345inject: script: # 自定义js - &lt;script type=&quot;text/javascript&quot; src=&quot;/js/custom.js?1&quot;&gt;&lt;/script&gt; - &lt;script src=&quot;/js/custom.js?1&quot;&gt;&lt;/script&gt; 文章页面包屑添加信息文章页面包屑添加显示信息https://blog.felicx.eu.org/4199909915.html#%E6%96%87%E7%AB%A0%E9%9D%A2%E5%8C%85%E5%B1%91%E6%98%BE%E7%A4%BA%E5%AD%97%E6%95%B0-%E9%98%85%E8%AF%BB%E6%97%B6%E9%95%BF-%E6%A0%87%E7%AD%BE 在 article_banner.ejs 内添加内容，路径：node_modules/hexo-theme-stellar/layout/_partial/main/navbar/123456789101112131415161718// 3.left.bottomel += partial(&#x27;dateinfo&#x27;)// 新增内容如下：//新增：字数显示|阅读时长显示el += &#x27;&lt;div class=&quot;flex-row&quot; id=&quot;page-words&quot;&gt;&lt;span style=&quot;padding: 4px;&quot;&gt;本文：&#x27; + wordcount(page.content) + &#x27;字&lt;/span&gt;&lt;span class=&quot;sep updated&quot; style=&quot;padding: 4px;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;text updated&quot; style=&quot;padding: 4px;&quot;&gt;阅读时长：&#x27; + min2read(page.content) + &#x27;分&lt;/span&gt;&lt;/div&gt;&#x27;;//新增：标签显示if (page.layout == &quot;post&quot; &amp;&amp; page.tags &amp;&amp; page.tags.length &gt; 0) &#123;el += &#x27;&lt;div class=&quot;flex-row&quot; id=&quot;tag&quot;&gt;&#x27;; // 将标签容器的创建移动到条件内部el += &#x27; &lt;span&gt;&amp;nbsp标签：&lt;/span&gt;&#x27;;el += list_categories(page.tags, &#123;class: &quot;cap breadcrumb&quot;,show_count: false,separator: &#x27;&amp;nbsp; &#x27;,style: &quot;none&quot;&#125;);el += &#x27;&amp;nbsp&lt;/div&gt;&#x27;;&#125; 在 _custom.styl 内的最后添加内容，路径：node_modules/hexo-theme-stellar/source/css/12345678910/* 文章内字数统计&amp;阅读时长 */.bread-nav div#page-words span.sep:before &#123;content: &#x27;|&#x27;;&#125;.bread-nav div#page-words span.updated &#123;visibility: visible;&#125;.bread-nav:hover div#page-words span.updated &#123;visibility: visible;&#125; 在 bread-nav.styl 中修改内容，将hidden修改为visible，路径：node_modules/hexo-theme-stellar/source/css/_components/partial/12345div#post-meta span.sep:before content: &#x27;|&#x27; span.updated visibility: visible 常用写作组件quot 引用Stellar 是迄今为止最好用的主题 1&#123;% quot Stellar 是迄今为止最好用的主题 %&#125; 热门话题 1&#123;% quot 热门话题 icon:hashtag %&#125; 特别引用 1&#123;% quot 特别引用 icon:default %&#125; copy 复制行 1&#123;% copy curl -s https://sh.xaox.cc/install | sh %&#125; $ 1&#123;% copy curl -s https://sh.xaox.cc/install | sh prefix:$ %&#125; 1&#123;% copy git:https xaoxuu.com/hexo-theme-stellar %&#125; box 盒子容器此处为代码块格式，如果需要普通盒子容器，去掉 child:codeblock 即可： test123func test() &#123; // ...&#125; 语法123&#123;% box child:codeblock color:green %&#125; 内容&#123;% endbox %&#125; 普通格式的盒子容器： 内容 语法123&#123;% box color:green %&#125; 内容&#123;% endbox %&#125; 代码块代码块左上角为文件名或文件路径： Application.java12345public class App &#123; public static void main(String[] args) &#123; System.out.println(&quot;Hello World!&quot;); &#125;&#125; 语法1234``` 语言 文件名或路径 代码```（此处为占位符需要删除） tabs 分栏容器active：默认显示的标签页，默认为1 align:center：设置默认居中对齐（设置后，box容器按照内容显示大小） box容器代码块内容12let x = 123print(&quot;hello world&quot;) 语法123456789101112&#123;% tabs active:1 align:center %&#125; &lt;!-- tab 标签页1名称--&gt; &#123;% box %&#125; 内容 &#123;% endbox %&#125; &lt;!-- tab 标签页2名称--&gt; ```语言 文件名或路径 内容 ```（此处为占位符需要删除）&#123;% endtabs %&#125; grid 网格容器默认为动态列数，即每格最小宽度为240px，页面大于480px会显示2列，大于720px会显示3列，以此类推。 如果在网格内使用box容器，需要注意调整格式 工作为什么不喜欢工作也能很好的完成？工作是别人为你设计好的系统，像是在传送带上。同事、老板会不断推着你向前。 自我目标自发想去做的为什么会拖延？理论上内在动机更足，例如：学习、考证、副业等。但是这些没有人管你要结果，也没有deadline，把自己从舒服的状态抓出来做这件事是很累的，身体会默认选择让自己产生多巴胺的行为。 语法12345678910111213141516171819202122232425262728293031&#123;% grid %&#125;&lt;!-- cell --&gt;**工作**&#123;% box child:codeblock color:green %&#125;- 为什么不喜欢工作也能很好的完成？ 工作是别人为你设计好的系统，像是在传送带上。 同事、老板会不断推着你向前。&#123;% endbox %&#125;&lt;!-- cell --&gt;**自我目标**&#123;% box child:codeblock color:red %&#125;- 自发想去做的为什么会拖延？ 理论上内在动机更足，例如：学习、考证、副业等。 但是这些没有人管你要结果，也没有deadline， 把自己从舒服的状态抓出来做这件事是很累的， 身体会默认选择让自己产生多巴胺的行为。&#123;% endbox %&#125;&#123;% endgrid %&#125; note 备注块、标题备注块、彩色备注块部分颜色：red、orange、amber、yellow、green、cyan、blue、purple 常用：light、dark、warning、error 正文 1&#123;% note color:warning 正文 %&#125; 标题正文 1&#123;% note color:cyan 标题 正文 %&#125; 文本修饰标签 这是 密码 标签 这是 下划线 标签 这是 着重号 标签 这是 波浪线 标签 这是 删除线 标签 这是 上角标 标签 这是 下角标 标签 这是 键盘样式 标签，试一试：⌘ + D 12345678- 这是 &#123;% psw 密码 %&#125; 标签- 这是 &#123;% u 下划线 %&#125; 标签- 这是 &#123;% emp 着重号 %&#125; 标签- 这是 &#123;% wavy 波浪线 %&#125; 标签- 这是 &#123;% del 删除线 %&#125; 标签- 这是 &#123;% sup 上角标 color:red %&#125; 标签- 这是 &#123;% sub 下角标 %&#125; 标签- 这是 &#123;% kbd 键盘样式 %&#125; 标签，试一试：&#123;% kbd ⌘ %&#125; + &#123;% kbd D %&#125;","tags":["Hexo"],"categories":["其他"]},{"title":"敏捷开发流程","path":"/posts/51728.html","content":"需求整理概述 生活中的问题→需求 解决问题的方式（APP、小程序等）→愿景 达到的效果→心动念 需求管理将需求细化，明确应用的功能，整理为需求库 项目规划 明确部分需求（规划项目） 哪些需求可以快速地做出来？ 哪些需求是用户必须使用的？ 讨论规划的可行性 规划好迭代功能和周期 根据第一次迭代规划的需求，进行任务设计和OKR设计，使用Smart指标描述任务 第一次迭代完成后（项目第一个版本） 收集意见整理需求库（需求管理） 从需求库中选择并进行二次规划和迭代（项目规划中的1、2部分） 其他 迭代过程通常需要进行5~6次或更多 上线前需要压测、准备宣传资料","tags":["开发"],"categories":["其他"]},{"title":"自我使用说明书","path":"/posts/60549.html","content":"心力状态和情绪像天气一样不受控制，解决拖延、心力不足的出发点应该像农民一样，按照不同天气构建不同的应对方式。 很多优秀的人都是拥有一套能够push自己的系统和支撑他们的环境，拖延、行动力不足是因为缺乏这个系统和环境。 不要相信能够使用Passion一直支撑自己，这不符合人的天性，可以使用系统对自己进行客观、标准化的描述。 数据记录（看见自己尚未被觉察的部分）绝大多数人没有想象中了解自己 比如在假期开始前制定的计划，假期结束后有多少能够完成呢？ 缺少无痛启动工作状态的方法和策略 即使知道目标多重要，没有人push的话仍然没有办法完成自己给自己制定的任务。 把心力状态按照最低1星，最高5星这样的状态去计算，制定计划时期的心力状态实际是5星，按照这种是肯定执行不到位的。 所以做计划的时候，要按照自己是3星，甚至是2星的状态去制定，哪怕状态不好的时候也能去推动进展。 但是，很多人不知道，甚至会高估自己做事的3星水平，所以需要使用工具来对自己进行统计： 番茄钟1234567在任务开始和结束时点击，计算自己这次任务时长有多少个番茄钟，如果中途被打断了，使用其他计时器统计被打断的时长，最后在总的时长中减去，这样就可以统计出一天中在这件事上专注了多长时间，用了多少个番茄钟。把每天的番茄钟个数等统计到日记里进行汇总 情绪周期 压迫自己太久后，身体自然会让你变慢下来。这段时间内不需要再逼迫自己赶进度，顺其自然休息一下。 项目管理（尽可能减少内耗）把一件事进行下去并不难，最难的部分在于每天的启动，怎样才能在启动上减少自己的内在阻力呢？ 提高行动的可能性 提高行动概率，降低拖延概率。 不要把重点放在今天怎么没有做？我为什么没有坚持下来这种事情上，而是如果提高下次行动起来的可能性，哪怕行动概率提升10%也是很大的进步。 行动力 &#x3D; 行动的概率 × 时间 工作为什么不喜欢工作也能很好的完成？工作是别人为你设计好的系统，像是在传送带上。同事、老板会不断推着你向前。 自我目标自发想去做的为什么会拖延？理论上内在动机更足，例如：学习、考证、副业等。但是这些没有人管你要结果，也没有deadline，把自己从舒服的状态抓出来做这件事是很累的，身体会默认选择让自己产生多巴胺的行为。 如何设计系统 每天为这个目标工作至少半小时，状态好可以多做一点 尽量简单的开始，状态极差时也能至少完成一分钟的简单工作 目的：每天都能和这件事或者这个方向产生连接，保持一个做事的状态比拥有一大块时间时再启动要容易的多 calender1234567891011使用单独的日历工具安排计划，不要超过3~5天，否则会容易摆烂。如果今天不想做，就把任务拖拽到下一天，并把在今天做的事标注为新任务，拖拽前也要考虑下是卡在哪个任务上，让自己产生了消极情绪，是否任务太难了？如果拆分为多个小任务，能否继续完成？如果还是不行，就拖拽到第二天精力比较好的时候，这时会知道有一个确定的任务在等待完成，会提高推进这件事的可能性。再微小的推进也能极大的刺激自我效能感，因为已经从纠结的心态转变为行动的心态。 系统设计最重要的部分：每天都要和任务产生链接 设计的Tips每次开始工作时进行计时（番茄钟），完成后进行统计归档每个项目刚开始没有头绪时，从问自己问题开始，不断拆解细分。 记录下来，选一些能做的放到3天计划内，如果被卡住了，也要写日记记录下来和自己对话（包括没有心力去执行的时候也是如此）卡住是很正常的，不要等着状态变好再去执行，要学会给自己做心理辅导，不断和自己对话，写着写着大概就能分析出接下来该去做什么了对工作内容进行拆分，并分段计时，查看具体哪个环节花费的时间过长，下次进行改善最重要的是让自己能够轻松启动起来，进入工作状态，把自己哄进工作的轨道，就会自然而然push不需要设计的过于详细，边推进边改动 复盘（需要持续、定期的亲自去做）目的一：定期关照自己的身心状态 是否处于某种惯性中不自知？ 目的二：明确清晰下一步行动 写出下一阶段的任务和目标 周复盘记录本周（实事求是）需要记录本周做了哪些事情计划下一周（通常只做3天的计划） 复盘模板示例回顾目标，评估结果输入输出改善提升身心其他下周的任务关键任务记录项目还能如何拆分？分析原因，总结原因遇到了哪些困难和卡点，做了哪些尝试？可以做哪些改变，可以让下周更好？ 月复盘&#x2F;季度复盘重点不是记录做了什么事情，而是反思和规划这段时间做了哪些项目，遇到什么问题（5Why），自己的想法，有没有改变等使用奥德赛模型询问自己恐惧假设，担心自己某些事情得到不好的结果时，问自己一些问题 复盘模板示例回顾目标，评估结果这个有有哪些产出和改善？自述一下工作状态分析原因，总结原因OKR进度如何？遇到了哪些问题？（至少问自己5个问题）改善的措施思考一下这个月发生的事情，老天爷想告诉你什么信息？规划未来行动奥德赛计划如果我继续现在的到了，五年后的生活该是什么样子？如果我走一条完全不同的道路，五年后的生活该是什么样子？如果我走一条完全不同的道路，不担心钱也不在意别人的眼光，五年后的生活该是什么样子？接下来的12个月，在生活的不同方面，你希望庆祝什么？发现自己有恐惧的事情时再写这个 恐惧假设？当你担心某件事有不好的结果时，试着问自己以下的问题如果我做了这件事，最糟糕的情况是什么？我可以做些什么来防止这些最糟糕的情况发生？如果最糟糕的情况真的发生，我可以做些什么弥补？尝试做这件事的好出是什么？如果我不做这件事情，六个月、一年、三年的生活会是什么样子？ 持续改善 把所有改善措施单独拎出来（Kaizen系统） 一开始很容易做得形式化，沉迷于各种各样的复盘模型，花里胡哨，只要坚持做下去，就会自然地精简掉那些矫情的部分，慢慢接近复盘最核心的意义：让自己定期地记录和反思，在这个过程里关照自己内心的真正需求。 结语如果没有支持帮助你的外在环境和力量，就可以建立一些自我支持的系统，多关照自己的内心，保护好自己的念头 向外寻求帮助是一种方法，自我支持也是一种坚实的力量，佛家讲：每人都是本自具足的 不要专注于目标、系统，而是专注于自己的内心 人的内心和想法很多是受身体和外在环境影响的，当一些因素满足时，有些行为的发生是必然的 KISS常用于活动策划落地或者项目执行结束后总结时使用。 K（Keep） 需要保持的：哪些做得好，以后继续保持。 I（Improve） 需要改进的：哪些不理想，后续需要改进。 S（Stop） 需要停止的：哪些不利行为，需要停止。 S（Start） 需要开始的：哪些东西缺失，需要开始执行。 PCDAP（Plan） 计划：确定目标、方针、活动计划。D（Do） 执行：拆解上一步的目标，将其转换为具体行动并且执行。C（Check） 检查：总结执行计划的结果，注意效果，找出问题。A（Action） 行动、处理：对检查的结果进行处理，成功的经验进行肯定并适当标准化；失败的教训加以总结，避免重现。本阶段未解决的问题放到下一个 PDCA 循环。","tags":["个人成长"],"categories":["其他"]}]